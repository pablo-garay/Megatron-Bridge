name: ~Update dependencies template
on:
  workflow_call:
    inputs:
      target-branch:
        required: true
        type: string
        description: "The target branch to bump"
    secrets:
      PAT:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      SSH_KEY:
        required: true
      SSH_PWD:
        required: true

jobs:
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      bump-branch: bump-ci-container-${{ steps.ref.outputs.date }}-${{ inputs.target-branch }}
      date: ${{ steps.ref.outputs.date }}
    steps:
      - name: Get date
        id: ref
        run: echo "date=$(date +%F)" | tee -a "$GITHUB_OUTPUT"

  update-lockfile:
    environment: main
    runs-on: ubuntu-latest
    needs: [pre-flight]
    env:
      SOURCE_BRANCH: ${{ needs.pre-flight.outputs.bump-branch }}
      TARGET_BRANCH: ${{ inputs.target-branch }}
    steps:
      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure ACR Login
        run: az acr login --name nemoci

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}
          submodules: recursive

      - name: Build container
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          docker build -f docker/Dockerfile.ci --secret id=GH_TOKEN -t megatron-bridge .

      - name: Create bump branch if not exists
        run: |
          if ! git ls-remote --exit-code origin $SOURCE_BRANCH; then
            git checkout -b $SOURCE_BRANCH $TARGET_BRANCH
            git push origin $SOURCE_BRANCH
          fi

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SOURCE_BRANCH }}
          submodules: recursive

      - name: Update submodules
        run: |
          cd 3rdparty/Megatron-LM
          git fetch origin dev
          git checkout FETCH_HEAD

      - name: Upgrade lock file
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          docker run \
          --rm \
          -v $(pwd):/opt/Megatron-Bridge \
          -w /opt/Megatron-Bridge \
          -e GH_TOKEN=${{ secrets.PAT }} \
          megatron-bridge \
          bash -c 'uv lock --upgrade || (echo "Lock file corrupted, regenerating..." && rm -f uv.lock && uv lock)'

<<<<<<< HEAD
=======
      - name: Force change for PR creation
        run: |
          # Create a timestamp file to ensure there's always a change to commit
          echo "Last dependency check: $(date -u)" > .last-dependency-check
          echo "‚úÖ Created .last-dependency-check timestamp file to ensure PR creation"

>>>>>>> 59ac7128 (temp:adjust for PR force creation)
      - name: Commit and push changes
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "========================================="
          echo "Preparing to commit changes"
          echo "========================================="
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.signingkey ""
          git config --global commit.gpgsign false
          
          # Configure remote URL with token
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
          
          # Show current status
          echo "Current branch:"
          git branch --show-current
          echo ""
          echo "Files modified:"
          git status --short
          echo ""
          
          # Stage all changes
          git add -A
          
          echo "Staged changes:"
          git diff --staged --stat
          echo ""
          
          # Commit if there are changes
          if ! git diff --staged --quiet; then
            echo "Committing changes..."
            git commit -m "chore(beep boop ü§ñ): Update dependencies and submodules"
            echo ""
            echo "Pushing to $SOURCE_BRANCH..."
            git push origin $SOURCE_BRANCH
            echo "‚úÖ Changes committed and pushed to $SOURCE_BRANCH"
          else
            echo "‚ö†Ô∏è No changes to commit - this might prevent PR creation!"
          fi

      - name: Upload lock file
        uses: actions/upload-artifact@v4
        with:
          name: lock-file-${{ env.SOURCE_BRANCH }}
          path: uv.lock

  create-pr:
    needs: [update-lockfile, pre-flight]
    runs-on: ubuntu-latest
    environment: main
    outputs:
      pr-number: ${{ steps.create-pr.outputs.pr-number }}
    env:
      SOURCE_BRANCH: ${{ needs.pre-flight.outputs.bump-branch }}
      TARGET_BRANCH: ${{ inputs.target-branch }}
      GH_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          ref: ${{ env.TARGET_BRANCH }}

<<<<<<< HEAD
      - name: Install GPG
        run: sudo apt-get install -y gnupg2

      - name: Import GPG key (for signing)
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec
        id: gpg-action
        with:
          gpg_private_key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PWD }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Create Bump PR
        uses: peter-evans/create-pull-request@v6
        id: create-pull-request
        env:
          title: "chore(beep boop ü§ñ): Bump `uv.lock` (${{ inputs.target-branch}}) (${{ needs.pre-flight.outputs.date }})"
        with:
          branch: ${{ env.SOURCE_BRANCH }}
          base: ${{ env.TARGET_BRANCH }}
          title: ${{ env.title }}
          token: ${{ secrets.PAT }}
          body: |
            üöÄ PR to bump `uv.lock` in `${{ inputs.target-branch }}`.  
=======
      - name: Create or update PR
        id: create-pr
        run: |
          TITLE="chore(beep boop ü§ñ): Bump \`uv.lock\` (${{ inputs.target-branch}}) (${{ needs.pre-flight.outputs.date }})"
          BODY="üöÄ PR to bump \`uv.lock\` in \`${{ inputs.target-branch }}\`.
>>>>>>> b4f0cb6c (pr merge fix)

          üìù This PR will be automatically merged if all CI checks pass successfully.
          If any CI checks fail, the PR will remain open for manual review.

<<<<<<< HEAD
            ü§ñ **Auto-merge enabled** - No manual action required if CI passes.
          commit-message: ${{ env.title }}
          signoff: true
          committer: "${{ steps.gpg-action.outputs.name }} <${{ steps.gpg-action.outputs.email }}>"
=======
          ü§ñ **Auto-merge enabled** - No manual action required if CI passes."
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head "$SOURCE_BRANCH" --base "$TARGET_BRANCH" --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [ -n "$EXISTING_PR" ] && [ "$EXISTING_PR" != "null" ]; then
            echo "‚úÖ PR #$EXISTING_PR already exists, updating it..."
            gh pr edit "$EXISTING_PR" --title "$TITLE" --body "$BODY"
            echo "pr-number=$EXISTING_PR" >> $GITHUB_OUTPUT
          else
            # Check if source branch exists and has commits
            if git ls-remote --exit-code --heads origin "$SOURCE_BRANCH" >/dev/null 2>&1; then
              echo "Creating new PR from $SOURCE_BRANCH to $TARGET_BRANCH..."
              PR_URL=$(gh pr create \
                --title "$TITLE" \
                --body "$BODY" \
                --base "$TARGET_BRANCH" \
                --head "$SOURCE_BRANCH" 2>&1) || {
                echo "Failed to create PR: $PR_URL"
                echo "This might mean no changes exist between branches"
                exit 0
              }
              
              PR_NUMBER=$(echo "$PR_URL" | sed 's/.*\/pull\/\([0-9]*\)$/\1/')
              echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
              echo "‚úÖ Created new PR #$PR_NUMBER at $PR_URL"
            else
              echo "‚ö†Ô∏è Branch $SOURCE_BRANCH does not exist on remote. No PR created."
              exit 0
            fi
          fi
>>>>>>> b4f0cb6c (pr merge fix)

  auto-merge:
    needs: [create-pr, pre-flight]
    runs-on: ubuntu-latest
    environment: main
    env:
      SOURCE_BRANCH: ${{ needs.pre-flight.outputs.bump-branch }}
      TARGET_BRANCH: ${{ inputs.target-branch }}
      GH_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          ref: ${{ env.TARGET_BRANCH }}

      - name: Find PR number
        id: find-pr
        run: |
          # First try to get PR number from previous job output
          PR_NUMBER="${{ needs.create-pr.outputs.pr-number }}"
          
          # If not found, search for the PR by branch name
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "" ]; then
            echo "‚ö†Ô∏è PR number not in output, searching by branch..."
            PR_NUMBER=$(gh pr list --head "$SOURCE_BRANCH" --base "$TARGET_BRANCH" --json number --jq '.[0].number' 2>/dev/null || echo "")
          fi
          
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "" ]; then
            echo "‚ùå No PR found for branch $SOURCE_BRANCH -> $TARGET_BRANCH"
            echo "This likely means no changes were detected or the PR creation failed."
            exit 0
          fi
          
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "‚úÖ Found PR #$PR_NUMBER"

      - name: Wait for CI checks and auto-merge
        if: steps.find-pr.outputs.pr-number != ''
        env:
          PR_NUMBER: ${{ steps.find-pr.outputs.pr-number }}
        run: |
          echo "Monitoring PR #${PR_NUMBER} for CI check completion..."
          
          MAX_ATTEMPTS=144  # Wait up to 12 hours (144 attempts * 5 minutes)
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking CI status..."
            
            # Get PR status checks
            STATUS_JSON=$(gh pr view ${PR_NUMBER} --json statusCheckRollup)
            
            # Count total checks, successful checks, and failed checks
            TOTAL_CHECKS=$(echo "$STATUS_JSON" | jq '.statusCheckRollup | length')
            
            if [ "$TOTAL_CHECKS" -eq 0 ]; then
              echo "No status checks found yet. Waiting..."
              sleep 300
              continue
            fi
            
            PENDING_CHECKS=$(echo "$STATUS_JSON" | jq '[.statusCheckRollup[] | select(.conclusion == null or .conclusion == "" or .status == "IN_PROGRESS" or .status == "PENDING" or .status == "QUEUED")] | length')
            FAILED_CHECKS=$(echo "$STATUS_JSON" | jq '[.statusCheckRollup[] | select(.conclusion == "FAILURE" or .conclusion == "CANCELLED" or .conclusion == "TIMED_OUT")] | length')
            SUCCESS_CHECKS=$(echo "$STATUS_JSON" | jq '[.statusCheckRollup[] | select(.conclusion == "SUCCESS")] | length')
            
            echo "Status: $SUCCESS_CHECKS successful, $FAILED_CHECKS failed, $PENDING_CHECKS pending (out of $TOTAL_CHECKS total)"
            
            # If any checks failed, exit and leave PR open
            if [ "$FAILED_CHECKS" -gt 0 ]; then
              echo "‚ùå CI checks failed. Leaving PR open for manual review."
              echo "Failed checks:"
              echo "$STATUS_JSON" | jq -r '.statusCheckRollup[] | select(.conclusion == "FAILURE" or .conclusion == "CANCELLED" or .conclusion == "TIMED_OUT") | "  - \(.name): \(.conclusion)"'
              exit 0
            fi
            
            # If all checks are done and successful, merge
            if [ "$PENDING_CHECKS" -eq 0 ] && [ "$SUCCESS_CHECKS" -gt 0 ]; then
              echo "‚úÖ All CI checks passed! Auto-merging PR #${PR_NUMBER}..."
              
              # Merge the PR
              gh pr merge ${PR_NUMBER} --squash --auto --delete-branch
              
              echo "‚úÖ PR #${PR_NUMBER} has been merged successfully!"
              exit 0
            fi
            
            # Still waiting for checks to complete
            echo "Waiting for pending checks to complete..."
            sleep 300
          done
          
          echo "‚è±Ô∏è  Timeout reached. PR #${PR_NUMBER} will remain open for manual review."
          exit 0
